{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport izitoast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst inputEl = document.querySelector('#datetime-picker');\nconst btnEl = document.querySelector('[data-start]');\nconst timerDays = document.querySelector('[data-days]');\nconst timerHours = document.querySelector('[data-hours]');\nconst timerMinutes = document.querySelector('[data-minutes]');\nconst timerSeconds = document.querySelector('[data-seconds]');\n\nlet userSelectedDate;\nbtnEl.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  locale: {\n    firstDayOfWeek: 1,\n  },\n\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0].getTime();\n    if (userSelectedDate < Date.now()) {\n      btnEl.disabled = true;\n      izitoast.show({\n        message: 'Please choose a date in the future',\n        position: 'topCenter',\n        color: 'red',\n      });\n    } else {\n      btnEl.disabled = false;\n    }\n  },\n};\n\nflatpickr(inputEl, options);\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateTimer({ days, hours, minutes, seconds }) {\n  timerDays.textContent = `${String(days).padStart(2, '0')}`;\n  timerHours.textContent = `${String(hours).padStart(2, '0')}`;\n  timerMinutes.textContent = `${String(minutes).padStart(2, '0')}`;\n  timerSeconds.textContent = `${String(seconds).padStart(2, '0')}`;\n}\n\nbtnEl.addEventListener('click', isStartTimer);\nfunction isStartTimer(event) {\n  btnEl.disabled = true;\n\n  const intervalId = setInterval(() => {\n    const currentTime = Date.now(); \n    const ms = userSelectedDate - currentTime; \n    const restTime = convertMs(ms); \n    updateTimer(restTime); \n    if (ms <= 1000) {\n      clearInterval(intervalId);\n    }\n  }, 1000);\n}\n"],"names":["inputEl","btnEl","timerDays","timerHours","timerMinutes","timerSeconds","userSelectedDate","options","selectedDates","izitoast","flatpickr","convertMs","ms","days","hours","minutes","seconds","updateTimer","isStartTimer","event","intervalId","currentTime","restTime"],"mappings":"+IAKA,MAAMA,EAAU,SAAS,cAAc,kBAAkB,EACnDC,EAAQ,SAAS,cAAc,cAAc,EAC7CC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5D,IAAIC,EACJL,EAAM,SAAW,GAEjB,MAAMM,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,OAAQ,CACN,eAAgB,CACjB,EAED,QAAQC,EAAe,CACrBF,EAAmBE,EAAc,GAAG,QAAO,EACvCF,EAAmB,KAAK,OAC1BL,EAAM,SAAW,GACjBQ,EAAS,KAAK,CACZ,QAAS,qCACT,SAAU,YACV,MAAO,KACf,CAAO,GAEDR,EAAM,SAAW,EAEpB,CACH,EAEAS,EAAUV,EAASO,CAAO,EAE1B,SAASI,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAClE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAY,CAAE,KAAAJ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACtDd,EAAU,YAAc,GAAG,OAAOW,CAAI,EAAE,SAAS,EAAG,GAAG,IACvDV,EAAW,YAAc,GAAG,OAAOW,CAAK,EAAE,SAAS,EAAG,GAAG,IACzDV,EAAa,YAAc,GAAG,OAAOW,CAAO,EAAE,SAAS,EAAG,GAAG,IAC7DV,EAAa,YAAc,GAAG,OAAOW,CAAO,EAAE,SAAS,EAAG,GAAG,GAC/D,CAEAf,EAAM,iBAAiB,QAASiB,CAAY,EAC5C,SAASA,EAAaC,EAAO,CAC3BlB,EAAM,SAAW,GAEjB,MAAMmB,EAAa,YAAY,IAAM,CACnC,MAAMC,EAAc,KAAK,MACnBT,EAAKN,EAAmBe,EACxBC,EAAWX,EAAUC,CAAE,EAC7BK,EAAYK,CAAQ,EAChBV,GAAM,KACR,cAAcQ,CAAU,CAE3B,EAAE,GAAI,CACT"}